"Plugins
call plug#begin('~/.vim/plugged')

"colorschemes
Plug 'morhetz/gruvbox'
"Autoclose quotes and 
Plug 'jiangmiao/auto-pairs'
"Git pluggins
Plug 'airblade/vim-gitgutter'
Plug 'lyokha/vim-xkbswitch'
Plug 'easymotion/vim-easymotion'
Plug 'mattn/emmet-vim'
Plug 'vifm/vifm.vim'
Plug 'itchyny/lightline.vim'
Plug 'vimwiki/vimwiki'

call plug#end()


" --------------------------------------------
" Settings
" --------------------------------------------
" Включаем 256 цветов в терминале
set t_Co=256
set termencoding=utf-8 "Кодировка терминала

" Определение русской раскладки
set keymap=russian-jcukenwin
" При запуске vim использовать en раскладку
set iminsert=0

syntax on

"Поддержка мыши
set mouse=a

set number
set relativenumber

set tabstop=4
set shiftwidth=4
"set smarttab

"Ставим табы пробелами
set expandtab
" Вырубаем черточки на табах
set showtabline=1
" Автоотступ
set autoindent
" Отключить автокомментарий
set formatoptions-=cro

" Переносим на другую строчку, разрываем строки
set wrap
set linebreak

" Не подсвечивать результаты поиска
set nohlsearch
"Инкрементный поиск
set incsearch
" Игнорировать регистр при поиске
set ignorecase

" Удобное поведение backspace
set backspace=indent,eol,start whichwrap+=<,>,[,]

" Вырубаем .swp и ~ (резервные) файлы
set nobackup
set noswapfile

" Кодировка файлов по умолчанию
set encoding=utf-8
set fileencodings=utf8,cp1251

"Интерпретация чисел ведущим нулем как десятичные
set nrformats=

set clipboard=unnamed
set textwidth=80
set ruler

" Чтобы переключаться между буферами без сохранения
set hidden

" Не выводить сообщения об ошибке при попытке закрыть(удалить) буфер с
" не сохраненными изменениями. Вместо ошибки будет появляться подтверждение
" закрытия не сохраненного файла.
set confirm

" Понижаем задержку ввода escape последовательносей
set ttimeoutlen=10

" Увеличить кол-во последних запоминаемых команд
set history=200

" Подсвечиваем все что можно подсвечивать
let python_highlight_all = 1

set omnifunc=pythoncomplete#CompletePython

" Перед сохранением вырезаем пробелы на концах (только в .py файлах)
autocmd BufWritePre *.py normal m`:%s/\s\+$//e ``
" В .py файлах включаем умные отступы после ключевых слов
autocmd BufRead *.py set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class


" -----------------------------------------
" Plugins
" -----------------------------------------

" gruvbox
"Theme settings
let g:gruvbox_contrast_dark = 'hard'
colorscheme gruvbox
set background=dark

" xkb-switch  
" Поддержка команд на русском языке
let g:XkbSwitchEnabled = 1
"let g:XkbSwitchIMappings = ['ru']
let g:XkbSwitchLib = '/usr/lib/libxkbswitch.so'

"====================================
"mappings
"====================================

"Переключение раскладки с помоьщью <C-l>
imap <C-l> <C-^>
"Для командного режима
cmap <silent> <C-l> <C-^>

"для работы с буфером обмена
noremap <Leader>y "*y
noremap <Leader>p "*p
noremap <Leader>Y "+y
noremap <Leader>P "+p
" -------------------------------------------------------
"переназначение перемещения между фактической и экранной строкой
nnoremap 0 g0
nnoremap g0 0
nnoremap ^ g^
nnoremap g^ ^
nnoremap $ g$
nnoremap g$ $
" -------------------------------------------------------
" При введение %% в командной стр подставится путь к файлу
cnoremap <expr> %% getcmdtype() == ":" ? expand('%:h').'/' : '%%'

" -------------------------------------------------------
"Изменение <Leader> с \ на ,
let mapleader=","

" -------------------------------------------------------
"Изменение \ на , (для поиска в симв. в обр. напр.)
noremap \ ,

" -------------------------------------------------------
"Easy Motion
"Включть hotkeys
map <Leader> <Plug>(easymotion-prefix)
"Переназначение <Leader>s на <Leader>a
map <Leader>a <Plug>(easymotion-F)

" --------------------------------------------
" Vifm
map <Leader>vv :Vifm<CR>
map <Leader>vs :VsplitVifm<CR>
map <Leader>vh :SplitVifm<CR>
map <Leader>vt :TabVifm<CR>
map <Leader>vd :DiffVifm<CR>

" --------------------------------------------
" Lightline
set laststatus=2
set noshowmode

"Функция для отображения раскладки
function! LightLineKeymap()
    let km = &iminsert == 0 ? 'en' : 'ru'
    return km
endfunction

let g:lightline = {
      \ 'colorscheme': 'gruvbox',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'keymap', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \     'keymap': 'LightLineKeymap',
      \ }, 
      \ }

let g:lightline.tabline = {
    \ 'left': [ [ 'tabs' ] ],
    \ 'right': [ [] ]}
" --------------------------------------------
" Other
" --------------------------------------------

" Форма курсора
" 1 - мигающий прямоугольник
" 2 - обычный прямоугольник
" 3 - мигающее подчеркивание
" 4 - просто подчеркивание
" 5 - мигающая вертикальная черта
" 6 - просто вертикальная черта
let &t_SI.="\e[1 q" "SI = режим вставки
let &t_SR.="\e[3 q" "SR = режим замены
let &t_EI.="\e[2 q" "EI = нормальный режим

